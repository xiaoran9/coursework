
public class Environment {
	int[][] world;
	int size;
	int nettle;
	public Environment(String level,int n) {
		switch(level.toUpperCase()){
		case "A" :
		if(n == 1){
			this.world = new int [][] {
				{0, 0, 0, 2, -1},
				{0, 0, 0, 2,-1},
				{1, 2, 1, 2, 1},
				{-1, 3, -1, 2, 0},
				{1, 3, -1, 2, 0},
				};
			}
			else if(n==2){
				this.world = new int [][] {
					{0, 0, 1, -1, -1},
					{0, 0, 1, 2, 2},
					{1, 2, 1, 1, 0},
					{-1, 2, -1, 2, 1},
					{1, 2, 2, -1, 1},
					};
					
			}
			else if(n==3){
				this.world = new int [][] {
				{0, 0, 1, 2, 2},
				{0, 1, 3,-1,-1},
				{0, 2, -1, -1, 3},
				{0, 2, -1, 3, 1},
				{0, 1, 1, 1, 0},
				};
				
			}
			else if(n==4){
				this.world = new int [][] {
					{0, 0, 0, 0, 0},
					{1, 2, 1, 1, 0},
					{-1, 2, -1, 1, 0},
					{3, 5, 3, 2, 0},
					{-1, -1, -1, 1, 0},
					};
			}
			else if(n==5){	
				this.world = new int [][] {
						{0, 0, 0, 1, -1},
						{1, 1, 1, 1, 1},
						{2, -1, 2, 0, 0},
						{3, -1, 3, 1, 0},
					    {-1, 3, -1, 1, 0},
						};
			 }
		size =5;
		nettle = 5;
		break;
		case "B":
		
		if(n == 1){
			world = new int [][] {
				{0, 0, 0, 1, 1, 1, 0, 1, -1},
				{0, 0, 1, 2, -1, 1, 0, 1, 1},
				{0, 0, 2, -1, 3, 1, 0, 1, 1},
				{0, 0, 2, -1, 2, 0, 0, 1, -1},
				{1, 1, 1, 1, 1, 0, 0, 2, 2},
				{-1, 2, 1, 1, 0, 0, 0, 1, -1},
				{1, 2, -1, 1, 0, 0, 0, 1, 1},
				{1, 2, 1, 1, 0, 0, 1, 1, 1},
				{-1, 1, 0, 0, 0, 0, 1, -1, 1},
				};
			}
			else if(n==2){
				world = new int [][] {
				{0, 0, 0, 0, 0, 0, 1, 1, 1},
				{0, 0, 0, 0, 1, 1, 3, -1, 2},
				{0, 0, 0, 0, 2, -1, 6, -1, 4},
				{0, 0, 0,0, 2, -1, -1, -1, -1},
				{0, 0, 0, 0, 1, 3, -1, 5, 3},
				{0, 0, 0, 0, 0, 1, 2, -1, 1},
				{0, 0, 0, 0, 0, 0, 1, 1, 1},
				{0, 0, 0, 0, 1, 1, 1, 0, 0},
				{0, 0, 0, 0, 1, -1, 1, 0, 0},
				};
			}
			else if(n==3){
			world= new int [][] {
				{0, 0, 1, -1, 1, 1, -1, 2, 1},
				{1, 1, 1, 1, 1, 1, 2, -1, 1},
				{-1, 1, 0, 0, 0, 1, 2, 2, 1},
				{2, 2, 1,1, 1, 2, -1, 1, 0},
				{1, -1, 1, 1, -1,2, 1, 1, 0},
				{1, 1, 1, 1, 1, 1, 0, 1, 1},
				{0, 0, 0, 0, 0, 1, 1, 2, -1},
				{0, 0, 0, 0, 0, 1, -1, 3, 2},
				{0, 0, 0, 0, 0, 1, 1, 2, -1},
				};
			}else if(n==4){
			world= new int [][] {
				{0, 0, 0, 0, 0, 0, 1, -1, 1},
				{0, 1, 2, 2, 1, 0, 1, 1, 1},
				{0, 1, -1, -1, 1, 0, 0, 0, 0},
				{0, 1, 2,2, 1, 0, 0, 0, 0},
				{0, 0, 1, 1, 1, 0, 1, 1, 1},
				{0, 0, 1, -1, 2,1, 2, -1, 2},
				{1, 1, 2, 1, 2, -1, 4, 4, -1},
				{1,-1, 1, 0, 1, 2, -1, -1, 2},
				{1, 1, 1, 0, 0, 1, 2, 2, 1},
				}; 
			}
			else if(n==5){
			world= new int [][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 1, 1, 0, 0, 0, 0, 0, 0},
				{1, -1, 1, 0, 0, 1, 1, 1, 0},
				{1, 1, 1,0, 1, 2, -1, 1, 0},
				{0, 0, 0, 0, 1, -1, 3, 3, 1},
				{1, 2, 2, 1, 1,2, -1, 3, -1},
				{1, -1, -1, 2, 1, 1,2, -1, 2},
				{2,3, 4, -1, 1, 0, 1, 1, 1},
				{1,-1, 2, 1, 1, 0, 0, 0, 0},
				}; 
			}
		size =9;
		nettle =10;
			break;
			
		case "C":
			if(n == 1){
				world = new int [][] {
					{0, 0, 0, 0, 2, -1, 4, -1, 2, -1},
					{2, 2, 1, 0, 2, -1, -1, 4, 3, 2},
					{-1, -1, 1, 0, 1, 3, -1, 3, -1, 1},
					{-1, 3, 1, 0, 0, 1, 2, 3, 2, 1},
					{2, 2, 2, 1, 1, 0, 1, -1, 1, 0},
					{1, -1, 3, -1, 4, 3, 3, 2, 1, 0},
					{1, 1, 3, -1, -1, -1, -1, 1, 0, 0},
					{0, 1, 2, 4, -1, 4, 2, 1, 0, 0},
					{0, 1, -1, 3, 2, 1, 0, 0, 0, 0},
					{0, 1, 2, -1, 1, 0, 0, 0, 0, 0},
					};
				}
				else if(n==2){
					world = new int [][] {
						{0, 0, 2, -1, 2, 0, 0, 0, 1, 1},
						{0, 1, 3, -1, 2, 0, 0, 0, 2, -1},
						{0, 2, -1, 3, 1, 0, 0, 0, 2, -1},
						{2, 4, -1, 2, 0, 0, 0, 0, 1, 1},
						{-1, -1, 3, 2, 1, 0, 0, 0, 0, 0},
						{-1, 4, 3, -1, 3, 2, 2, 2, 1, 1},
						{-1, 3, 2, -1, 3, -1, -1, 3, -1,1},
						{-1, 2, 1, 2, 3, 4, -1, 3, 1, 1},
						{1, 1, 1, 3, -1, 3, 1, 1, 0, 0},
						{0, 0, 1, -1, -1, 2, 0, 0, 0, 0},
					};
				}
				else if(n==3){
				world= new int [][] {
					{0, 0, 0, 0, 1, 3, -1, 2, 0, 0},
					{1, 1, 1, 0, 1, -1, -1, 3, 2, 2},
					{1, -1, 1, 0, 1, 2, 2, 2, -1, -1},
					{1, 1, 1, 0, 0, 1, 1, 2, 3, -1},
					{1, 1, 0, 0, 0, 1, -1, 1, 2, 2},
					{-1, 2, 0, 0, 0, 1, 1, 1, 1, -1},
					{-1, 4, 1, 0, 0, 0, 0, 1, 2,2},
					{-1, -1, 3, 2, 2, 2, 1, 2, -1, 1},
					{-1, -1, 3, -1, -1, 2, -1, 2, 1, 1},
					{-1, 3, 2, 2, 2, 2, 1, 1, 0, 0},
					};
				}else if(n==4){
				world= new int [][] {
					{0, 0, 0, 2, -1, -1, -1, 1, 0, 0},
					{0, 0, 0, 3, -1, 6, 3, 1, 1, 1},
					{0, 0, 0, 2, -1, -1, 1, 0, 1, -1},
					{1, 1, 0, 1, 3, 3, 3, 2, 4, 3},
					{-1, 1, 0, 0, 1, -1, 2, -1, -1, -1},
					{1, 1, 0, 0, 1, 1, 2, 2, 4, -1},
					{0, 0, 0, 1, 1, 1, 1, 1,2, 1},
					{1, 2, 2, 2, -1, 1, 2, -1, 3, 1},
					{1, -1, -1, 2, 1, 1, 2, -1, -1, 2},
					{1, 2, 2, 1, 0, 0, 1, 3, -1, 2},
					}; 
				}
				else if(n==5){
				world= new int [][] {
					{0, 1, 1, 1, 1, -1, -1, 2, 1, 0},
					{0, 1, -1, 2, 2, 2, 3, -1, 1, 0},
					{0, 2, 4, -1, 2, 0, 1, 1, 1, 0},
					{0, 1, -1, -1, 3, 1, 1, 2, 1, 1},
					{0, 1, 4, -1, 3, 2, -1, 3, -1, 1},
					{0, 0, 2, -1, 3, 3, -1, 3, 1, 1},
					{0, 1, 3, 3, 3, -1, 2, 1, 0, 0},
					{1, 2, -1, -1, 3, 2, 1, 0, 0, 0},
					{-1, 2, 2, 3, -1, 3, 2, 1, 1, 1},
					{1, 1, 0, 1, 2, -1, -1, 1, 1, -1},
					}; 
				}
			size = 10;
			nettle = 20;
				break;
		}
	}
	public int getLocation(int x, int y){
		return world[x][y];
	}
	public int getSize(){
		return size;
	}
	public int getNettle(){
		return nettle;
	}
	}
